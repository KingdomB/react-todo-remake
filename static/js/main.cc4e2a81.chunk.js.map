{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","onChange","e","target","value","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAuCeA,EApCF,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,aAAcC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAmBvD,OACE,8BACE,2BAAOC,SApBc,SAACC,GAExBN,EAAaM,EAAEC,OAAOC,QAkBkBA,MAASL,EAAYM,KAAK,OAAOC,UAAU,eACjF,4BAAQC,QAjBc,SAACL,GACzBA,EAAEM,iBACFV,EAAS,GAAD,mBACHD,GADG,CACI,CACRY,KAAMV,EACNW,WAAW,EACXC,GAAoB,IAAhBC,KAAKC,aAGbjB,EAAa,KAQ4BU,UAAU,cAAcD,KAAK,UAClE,uBAAGC,UAAU,wBAEf,yBAAKA,UAAU,UACb,4BAAQL,SAVQ,SAACC,GACrBF,EAAUE,EAAEC,OAAOC,QASqBU,KAAK,QAAQR,UAAU,eACzD,4BAAQF,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,mB,OCAKW,EA9BF,SAAC,GAAqC,IAAnCN,EAAkC,EAAlCA,KAAMO,EAA4B,EAA5BA,KAAMnB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAejC,OACE,yBAAKQ,UAAU,QACb,wBAAIA,UAAS,oBAAeU,EAAKN,UAAY,YAAc,KACvDD,GAEJ,4BAAQF,QAfY,WACtBT,EAASD,EAAMoB,KAAI,SAAAC,GACjB,OAAIA,EAAKP,KAAOK,EAAKL,GACZ,2BACFO,GADL,IACUR,WAAYQ,EAAKR,YAGtBQ,OAQ8BZ,UAAU,gBAC7C,uBAAGA,UAAU,kBAEf,4BAAQC,QArBU,WACpBT,EAASD,EAAMsB,QAAO,SAAAC,GAAE,OAAIA,EAAGT,KAAOK,EAAKL,QAoBNL,UAAU,aAC3C,uBAAGA,UAAU,oBCJNe,EAlBE,SAAC,GAAwC,IAAtCxB,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUwB,EAAoB,EAApBA,cACnC,OACE,yBAAKhB,UAAU,kBACb,wBAAIA,UAAU,aACXgB,EAAcL,KAAI,SAAAD,GAAI,OACrB,kBAAC,EAAD,CACAlB,SAAaA,EACbD,MAAUA,EACVmB,KAASA,EACTO,IAAOP,EAAKL,GACZF,KAAQO,EAAKP,aCwDRe,MA9Df,WAAe,MAEuBC,mBAAS,IAFhC,mBAEL1B,EAFK,KAEMH,EAFN,OAGc6B,mBAAS,IAHvB,mBAGL5B,EAHK,KAGEC,EAHF,OAIgB2B,mBAAS,OAJzB,mBAILC,EAJK,KAIG1B,EAJH,OAK+ByB,mBAAS,IALxC,mBAKLH,EALK,KAKUK,EALV,KAObC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACRE,IACAC,MACC,CAAClC,EAAO6B,IAEX,IAAMI,EAAgB,WACpB,OAAOJ,GACL,IAAK,YACHC,EAAiB9B,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKN,cAC3C,MACF,IAAK,cACHiB,EAAiB9B,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKN,cAC3C,MACF,QACEiB,EAAiB9B,KAKjBkC,EAAiB,WACnBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUtC,KAE3CgC,EAAgB,WACpB,GAAqC,OAAlCG,aAAaI,QAAQ,SACtBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SACzC,CACJ,IAAIE,EAAYH,KAAKI,MAAMN,aAAaI,QAAQ,UAChDtC,EAASuC,KAGb,OACE,yBAAK/B,UAAU,OACb,gCACE,+CAEF,kBAAC,EAAD,CACAP,UAAcA,EACdF,MAAUA,EACVC,SAAaA,EACbF,aAAiBA,EACjBI,UAAcA,IAEd,kBAAC,EAAD,CACAF,SAAaA,EACbD,MAAUA,EACVyB,cAAkBA,MCpDJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cc4e2a81.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Form = ({setInputText, todos, setTodos, inputText, setStatus}) => {\n  const inputTextHandler = (e) => {\n    // Writing JS code functions\n    setInputText(e.target.value)\n  }\n  const submitTodoHandler = (e) => {\n    e.preventDefault()\n    setTodos([\n      ...todos, { \n        text: inputText, \n        completed: false, \n        id: Math.random() * 1000 \n      }\n    ])\n    setInputText('')\n  }\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  }\n  return(\n    <form>\n      <input onChange= { inputTextHandler } value= { inputText } type=\"text\" className=\"todo-input\" />\n      <button onClick= { submitTodoHandler } className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange= { statusHandler } name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\n\nconst Todo = ({ text, todo, todos, setTodos }) => {\n  // Events\n  const deleteHandler = () => {\n    setTodos(todos.filter(el => el.id !== todo.id))\n  }\n  const completeHandler = () => {\n    setTodos(todos.map(item => {\n      if (item.id === todo.id) {\n        return {\n          ...item,completed: !item.completed\n        }\n      }\n      return item\n    }))\n  }\n  return(\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\n        { text }\n      </li>\n      <button onClick= { completeHandler } className=\"complete-btn\">\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button onClick= { deleteHandler } className=\"trash-btn\">\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  )\n}\n\nexport default Todo","import React from 'react'\n// Import Components\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n  return(\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map(todo => (\n          <Todo \n          setTodos = { setTodos } \n          todos = { todos }\n          todo = { todo  } \n          key = {todo.id} \n          text = {todo.text} \n          />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// Improrting Components\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\n\n\n\nfunction App() {\n  // State\n  const [ inputText, setInputText ] = useState('')\n  const [ todos, setTodos] = useState([])\n  const [ status, setStatus] = useState('all')\n  const [ filteredTodos, setFilteredTodos ] = useState([])\n  //RUN ONCE when the app starts\n  useEffect(() => {\n    getLocalTodos()\n  }, [])\n  // Use Effect\n  useEffect(() => {\n    filterHandler()\n    saveLocalTodos()\n  }, [todos, status])\n  // Functions\n  const filterHandler = () => {\n    switch(status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break\n      default:\n        setFilteredTodos(todos)\n        break\n    }\n  }\n  // Save to Local Storage\n  const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos))\n  }\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]))\n    }else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    } \n  }\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>KB's Todo List</h1>\n      </header>\n      <Form \n      inputText = { inputText } \n      todos = { todos } \n      setTodos = { setTodos } \n      setInputText = { setInputText } \n      setStatus = { setStatus }\n      />\n      <TodoList\n      setTodos = { setTodos }\n      todos = { todos }\n      filteredTodos = { filteredTodos }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}